package com.jtournie.cml.tasitrack;

import android.app.PendingIntent;
import android.appwidget.AppWidgetManager;
import android.appwidget.AppWidgetProvider;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.widget.ImageView;
import android.widget.RemoteViews;

import com.jtournie.cml.tasitrack.R;

/**
 * Implementation of App Widget functionality.
 */
public class AppWidgetClock extends AppWidgetProvider {

    @Override
    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
        // There may be multiple widgets active, so update all of them
        final int N = appWidgetIds.length;
        for (int i = 0; i < N; i++) {
            updateAppWidget(context, appWidgetManager, appWidgetIds[i]);
        }
    }


    @Override
    public void onEnabled(Context context) {
        // Enter relevant functionality for when the first widget is created
    }

    @Override
    public void onDisabled(Context context) {
        // Enter relevant functionality for when the last widget is disabled
    }

    static void updateAppWidget(Context context, AppWidgetManager appWidgetManager,
                                int appWidgetId) {


        // Construct the RemoteViews object
        RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.app_widget_clock);

        //rotate the clock bg as needed
        rotateClockBg( context, views);

        // Instruct the widget manager to update the widget
        appWidgetManager.updateAppWidget(appWidgetId, views);
    }

    static void rotateClockBg( Context context, RemoteViews views)
    {
        //manipulate the bitmap to rotate the clock as needed
        Resources resources = context.getResources();
        Bitmap bitmap = BitmapFactory.decodeResource(resources,
                R.drawable.clock_colorbg);


        int w = bitmap.getWidth()*1.5;
        int h = bitmap.getHeight()*1.5;
        Matrix matrix = new Matrix();
        matrix.preRotate(ClockBackground.getRotationAngle(context));
        Bitmap rotaBitmap = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix,
                true);


        views.setImageViewBitmap(R.id.Widget_ClockBackground, rotaBitmap);
    }
}


